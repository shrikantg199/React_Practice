To connect a React.js frontend to an Express.js backend, you need to set up both projects and establish communication between them. Here's a step-by-step guide:

### 1. Set Up Your Express.js Backend:

#### Create a New Express.js Project:

```bash
mkdir my-express-app
cd my-express-app
npm init -y
```

#### Install Express and Other Dependencies:

```bash
npm install express cors
```

`cors` is a middleware that enables Cross-Origin Resource Sharing, allowing your React frontend to communicate with the Express backend.

#### Create an Express Server (in `server.js`):

```javascript
const express = require('express');
const cors = require('cors');
const app = express();
const port = 5000;

app.use(cors()); // Enable CORS for all routes

app.get('/api/data', (req, res) => {
  res.json({ message: 'Hello from the Express backend!' });
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
```

### 2. Set Up Your React.js Frontend:

#### Create a New React.js Project:

```bash
npx create-react-app my-react-app
cd my-react-app
```

### 3. Make Requests from React to Express:

#### Install Axios (or use the fetch API):

```bash
npm install axios
```

#### Update App.js (or your desired component):

```javascript
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [data, setData] = useState(null);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/data');
      setData(response.data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  return (
    <div>
      <h1>Hello from React!</h1>
      <p>Data from the backend: {data && data.message}</p>
    </div>
  );
}

export default App;
```

### 4. Run Both Server and Client:

#### Start the Express Backend:

```bash
cd path/to/your/express/app
node server.js
```

#### Start the React Frontend (in a separate terminal):

```bash
cd path/to/your/react/app
npm start
```

Now, you should have a basic connection between your React.js frontend and Express.js backend. The React app is making a request to the Express server, and you should see the data from the backend displayed in your React component.